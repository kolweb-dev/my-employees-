{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { getUsers } from \"../data/data\";\nconst START_LOADING = 'START_LOADING';\nconst HANDLE_SUCCESS = 'HANDLE_SUCCESS';\nconst HANDLE_ERROR = 'HANDLE_ERROR ';\nexport const startLoading = () => ({\n  type: START_LOADING\n});\nexport const handleError = () => ({\n  type: HANDLE_ERROR\n});\nexport const handleSuccess = users => ({\n  type: HANDLE_SUCCESS,\n  users\n});\nexport const loadUsers = () => {\n  return dispatch => {\n    store.dispatch(startLoading());\n    return getUsers().then(users => store.dispatch(handleSuccess(users))).catch(() => store.dispatch(handleError()));\n  };\n};\nexport const addActiveUser = () => {};\nconst initialState = {\n  users: [],\n  isLoading: false,\n  hasError: false,\n  activeUsers: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state,\n        isLoading: true,\n        hasError: false\n      };\n\n    case HANDLE_SUCCESS:\n      return { ...state,\n        users: action.users,\n        isLoading: false\n      };\n\n    case HANDLE_ERROR:\n      return { ...state,\n        hasError: true,\n        isLoading: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nlocalStorage.clear();\nconst store = createStore(reducer, initialState, applyMiddleware(thunk));\nstore.subscribe(() => {\n  localStorage['redux-store'] = JSON.stringify(store.getState());\n  console.log(localStorage);\n});\nexport default store;","map":{"version":3,"sources":["D:/Star-db/my-app/src/component/UsersStore/index.js"],"names":["createStore","applyMiddleware","thunk","getUsers","START_LOADING","HANDLE_SUCCESS","HANDLE_ERROR","startLoading","type","handleError","handleSuccess","users","loadUsers","dispatch","store","then","catch","addActiveUser","initialState","isLoading","hasError","activeUsers","reducer","state","action","localStorage","clear","subscribe","JSON","stringify","getState","console","log"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAAQC,QAAR,QAAuB,cAAvB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,cAAc,GAAG,gBAAvB;AACA,MAAMC,YAAY,GAAG,eAArB;AAEA,OAAO,MAAMC,YAAY,GAAG,OAAO;AAACC,EAAAA,IAAI,EAAEJ;AAAP,CAAP,CAArB;AACP,OAAO,MAAMK,WAAW,GAAG,OAAO;AAACD,EAAAA,IAAI,EAAEF;AAAP,CAAP,CAApB;AAEP,OAAO,MAAMI,aAAa,GAAIC,KAAD,KAAY;AACrCH,EAAAA,IAAI,EAAEH,cAD+B;AAErCM,EAAAA;AAFqC,CAAZ,CAAtB;AAKP,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC5B,SAAQC,QAAD,IAAc;AACjBC,IAAAA,KAAK,CAACD,QAAN,CAAeN,YAAY,EAA3B;AAEA,WAAOJ,QAAQ,GACdY,IADM,CACAJ,KAAD,IAAWG,KAAK,CAACD,QAAN,CAAeH,aAAa,CAACC,KAAD,CAA5B,CADV,EAEFK,KAFE,CAEI,MAAMF,KAAK,CAACD,QAAN,CAAeJ,WAAW,EAA1B,CAFV,CAAP;AAGH,GAND;AAOF,CARM;AASP,OAAO,MAAMQ,aAAa,GAAG,MAAM,CAElC,CAFM;AAIP,MAAMC,YAAY,GAAG;AACjBP,EAAAA,KAAK,EAAE,EADU;AAEjBQ,EAAAA,SAAS,EAAE,KAFM;AAGjBC,EAAAA,QAAQ,EAAE,KAHO;AAIjBC,EAAAA,WAAW,EAAE;AAJI,CAArB;;AAQA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAAChB,IAAf;AACI,SAAKJ,aAAL;AACI,aAAO,EACH,GAAGmB,KADA;AAEHJ,QAAAA,SAAS,EAAE,IAFR;AAGHC,QAAAA,QAAQ,EAAE;AAHP,OAAP;;AAKJ,SAAKf,cAAL;AACI,aAAO,EACH,GAAGkB,KADA;AAEHZ,QAAAA,KAAK,EAAEa,MAAM,CAACb,KAFX;AAGHQ,QAAAA,SAAS,EAAE;AAHR,OAAP;;AAKJ,SAAKb,YAAL;AACI,aAAO,EACH,GAAGiB,KADA;AAEHH,QAAAA,QAAQ,EAAE,IAFP;AAGHD,QAAAA,SAAS,EAAE;AAHR,OAAP;;AAMJ;AACI,aAAOI,KAAP;AArBR;AAuBH,CAxBD;;AAyBAE,YAAY,CAACC,KAAb;AAEA,MAAMZ,KAAK,GAAGd,WAAW,CAACsB,OAAD,EAAUJ,YAAV,EAAuBjB,eAAe,CAACC,KAAD,CAAtC,CAAzB;AAEAY,KAAK,CAACa,SAAN,CAAgB,MAAI;AAChBF,EAAAA,YAAY,CAAC,aAAD,CAAZ,GAA8BG,IAAI,CAACC,SAAL,CAAef,KAAK,CAACgB,QAAN,EAAf,CAA9B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,YAAZ;AACH,CAHD;AAOA,eAAeX,KAAf","sourcesContent":["import {createStore, applyMiddleware} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {getUsers} from \"../data/data\";\r\n\r\nconst START_LOADING = 'START_LOADING';\r\nconst HANDLE_SUCCESS = 'HANDLE_SUCCESS';\r\nconst HANDLE_ERROR = 'HANDLE_ERROR ';\r\n\r\nexport const startLoading = () => ({type: START_LOADING})\r\nexport const handleError = () => ({type: HANDLE_ERROR})\r\n\r\nexport const handleSuccess = (users) => ({\r\n    type: HANDLE_SUCCESS,\r\n    users\r\n})\r\n\r\nexport const loadUsers = () => {\r\n   return (dispatch) => {\r\n       store.dispatch(startLoading());\r\n\r\n       return getUsers()\r\n       .then((users) => store.dispatch(handleSuccess(users)))\r\n           .catch(() => store.dispatch(handleError()))\r\n   }\r\n}\r\nexport const addActiveUser = () => {\r\n\r\n}\r\n\r\nconst initialState = {\r\n    users: [],\r\n    isLoading: false,\r\n    hasError: false,\r\n    activeUsers: []\r\n}\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case START_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                hasError: false\r\n            }\r\n        case HANDLE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                users: action.users,\r\n                isLoading: false\r\n            }\r\n        case HANDLE_ERROR:\r\n            return {\r\n                ...state,\r\n                hasError: true,\r\n                isLoading: false\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nlocalStorage.clear();\r\n\r\nconst store = createStore(reducer, initialState,applyMiddleware(thunk));\r\n\r\nstore.subscribe(()=>{\r\n    localStorage['redux-store'] = JSON.stringify(store.getState())\r\n    console.log(localStorage)\r\n})\r\n\r\n\r\n\r\nexport default store;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}